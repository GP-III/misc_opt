    ASM_BEGIN 
     	
		xor GAX, GAX
		mov GCX, GCX
        mov GDX, [GSP+ARG4] // - U load src width 
        mov GCX, [GSP+ARG5] // - V load src height  
        mov eax, [GSP+ARG6] // - U load alpha count
        mov GCX, GCX        // - V spare 
        
        // check, select
        // ==========================
        and GAX, GAX        // - U count is zero ? 
        je __quit           // - V 
        and GCX, GCX        // - U height is zero ? 
        je __quit           // - V 
        and GDX, GDX        // - U width is zero ? 
        je __quit           // - V 

        // save frame 
        // ==========================   
        push GBX // - U
        push GBP // - V
        push GSI // - U
        push GDI // - V
        
        // calc arg
        // ==========================       
        lea GSI, [GDX*4]                        // - U load widht 's pitch 
        mov GBP, [GSP+ARG2+SIZE+SIZE+SIZE+SIZE] // - V load des pitch 
        mov GBX, [GSP+ARG3+SIZE+SIZE+SIZE+SIZE] // - U load src pitch
        sub GBP, GSI                            // - V get des RVA 
        sub GBX, GSI                            // - U get src RVA 
        mov GDI, [GSP+ARG0+SIZE+SIZE+SIZE+SIZE] // - V load des pointer 
        shl GAX, 4                              // - U get count index in table
        mov GSI, [GSP+ARG1+SIZE+SIZE+SIZE+SIZE] // - V load src pointer 
        // check enable over copy
        // ==========================
        cmp GAX, 255*16                         // - U compare count ... [over MAX ?]
        ja __over_copy                          // - V 
        
        // get XMM alpha r
        // ==========================       
        movdqa xmm7, xmmword ptr[apt_standard+GAX]
        pxor xmm6, xmm6 
        
        mov GAX, GDX // save width 
        mov GCX, GCX // spare 
        
        shr GDX, 4  // line pixel < 16 ?
        je bad_ready // 
        
        and GAX, 15 // round 15 ?
        jne normal_ready
        
        mov GAX, GDX  
        mov GBX, GBX 
        
        // =================================================
        // better case ... deal 8 pixel per, line no remain 
        // 
        // GAX - count 
        // GBX - src RVA  
        // GCX - height count 
        // GDX - temp count 
        // GSI - src pointer 
        // GDI - GDX temp
        // GBP - des RVA 
        // =================================================
        // xmm7 + ratio 
        // xmm6 - ZERO 
        // =================================================
    align 16 
    better_loop:
		SSE_SLOAD 	xmm0, 	[GSI+0x00]		 // fetch P0
		SSE_SLOAD 	xmm1, 	[GSI+0x10]		 // fetch P1
		SSE_SLOAD	xmm2, 	[GSI+0x20]		 // fetch P2
		SSE_SLOAD	xmm3,	[GSI+0x30]		 // fetch P3

		// rearrange - cross multiply
		// ===============================
		movdqa 		xmm4,	xmm0			 // xmm4 = xmm0 = P0 	
		punpcklbw 	xmm0, 	xmm6			 // RGB cross-decomposition L0-L1 (P0)
		pmulhuw 	xmm0, 	xmm7			 // RGB cross-mul get high L0-L1 (P0)
		movdqa		xmm5, 	xmm1 			 // xmm5 = xmm1 = P1 	   
		punpckhbw 	xmm4, 	xmm6			 // RGB cross-decomposition H0-H1 (P0)
		pmulhuw 	xmm4, 	xmm7			 // RGB cross-mul get high H0-H1 (P0)
		punpcklbw 	xmm1, 	xmm6			 // RGB cross-decomposition L0-L1 (P1)
		packuswb 	xmm0, 	xmm4			 // P0  merge 	
		pmulhuw 	xmm1, 	xmm7			 // RGB cross-mul get high L0-L1 (P1)		
		punpckhbw 	xmm5, 	xmm6			 // RGB cross-decomposition H0-H1 (P1)
		movdqa		xmm4, 	xmm2 			 // xmm4 = xmm2 = P2
		pmulhuw 	xmm5, 	xmm7			 // RGB cross-mul get high H0-H1 (P1)	
		punpcklbw 	xmm2, 	xmm6			 // RGB cross-decomposition L0-L1 (P2)
		packuswb 	xmm1, 	xmm5			 // P1  merge 	
		pmulhuw 	xmm2, 	xmm7			 // RGB cross-mul get high L0-L1 (P2)
		punpckhbw 	xmm4, 	xmm6			 // RGB cross-decomposition H0-H1 (P2)
		movdqa		xmm5,	xmm3			 // xmm5 = xmm3 = P3 
		pmulhuw 	xmm4, 	xmm7			 // RGB cross-mul get high H0-H1 (P2)
		punpcklbw 	xmm3, 	xmm6			 // RGB cross-decomposition L0-L1 (P3)
		packuswb 	xmm2, 	xmm4			 // P2  merge 
		pmulhuw 	xmm3, 	xmm7			 // RGB cross-mul get high L0-L1 (P3)
		punpckhbw 	xmm5, 	xmm6			 // RGB cross-decomposition H0-H1 (P3)
		pmulhuw 	xmm5, 	xmm7			 // RGB cross-mul get high H0-H1 (P3)
		packuswb 	xmm3, 	xmm5			 // P3  merge 
		
		// write target pixels 
		// ===============================
		SSE_DWRITE 	[GDI+0x00], xmm0		 // write P0
		SSE_DWRITE 	[GDI+0x10], xmm1		 // write P1
		SSE_DWRITE	[GDI+0x20], xmm2		 // write P2
		SSE_DWRITE	[GDI+0x30], xmm3		 // write P3        
        add         GSI,    64
        add         GDI,    64
        dec         GAX
        jne         better_loop     
        add         GSI,        GBX
        add         GDI,        GBP
        mov         GAX,        GDX 
        mov         GBX,        GBX 
        dec         GCX
        jne         better_loop     
        pop         GDI 
        pop         GSI 
        pop         GBP 
        pop         GBX 
    __quit: 
        ret 
        
    normal_ready:
        SIZE_MOV mm0, GSP 
        
        mov     GSP,    GCX 
        mov     GCX,    GDX // save large 
        bswap   GCX         // swap 
        mov      CX,     AX // save small 
        // =====================================================
        // normal case ... deal 16 pixel per, line remain 
        // 
        // GAX - count in width loop - small
        // GBX - src pitch
        // GCX - small/large temp
        // GDX - large count
        // GSI - src pointer 
        // GDI - des pointer
        // GBP - des pitch 
        // GSP - height count 
        // =====================================================
    align 16
    normal_loop:    
		SSE_SLOAD 	xmm0, 	[GSI+0x00]		 // fetch P0
		SSE_SLOAD 	xmm1, 	[GSI+0x10]		 // fetch P1
		SSE_SLOAD	xmm2, 	[GSI+0x20]		 // fetch P2
		SSE_SLOAD	xmm3,	[GSI+0x30]		 // fetch P3

		// rearrange - cross multiply
		// ===============================
		movdqa 		xmm4,	xmm0			 // xmm4 = xmm0 = P0 	
		punpcklbw 	xmm0, 	xmm6			 // RGB cross-decomposition L0-L1 (P0)
		pmulhuw 	xmm0, 	xmm7			 // RGB cross-mul get high L0-L1 (P0)
		movdqa		xmm5, 	xmm1 			 // xmm5 = xmm1 = P1 	   
		punpckhbw 	xmm4, 	xmm6			 // RGB cross-decomposition H0-H1 (P0)
		pmulhuw 	xmm4, 	xmm7			 // RGB cross-mul get high H0-H1 (P0)
		punpcklbw 	xmm1, 	xmm6			 // RGB cross-decomposition L0-L1 (P1)
		packuswb 	xmm0, 	xmm4			 // P0  merge 	
		pmulhuw 	xmm1, 	xmm7			 // RGB cross-mul get high L0-L1 (P1)		
		punpckhbw 	xmm5, 	xmm6			 // RGB cross-decomposition H0-H1 (P1)
		movdqa		xmm4, 	xmm2 			 // xmm4 = xmm2 = P2
		pmulhuw 	xmm5, 	xmm7			 // RGB cross-mul get high H0-H1 (P1)	
		punpcklbw 	xmm2, 	xmm6			 // RGB cross-decomposition L0-L1 (P2)
		packuswb 	xmm1, 	xmm5			 // P1  merge 	
		pmulhuw 	xmm2, 	xmm7			 // RGB cross-mul get high L0-L1 (P2)
		punpckhbw 	xmm4, 	xmm6			 // RGB cross-decomposition H0-H1 (P2)
		movdqa		xmm5,	xmm3			 // xmm5 = xmm3 = P3 
		pmulhuw 	xmm4, 	xmm7			 // RGB cross-mul get high H0-H1 (P2)
		punpcklbw 	xmm3, 	xmm6			 // RGB cross-decomposition L0-L1 (P3)
		packuswb 	xmm2, 	xmm4			 // P2  merge 
		pmulhuw 	xmm3, 	xmm7			 // RGB cross-mul get high L0-L1 (P3)
		punpckhbw 	xmm5, 	xmm6			 // RGB cross-decomposition H0-H1 (P3)
		pmulhuw 	xmm5, 	xmm7			 // RGB cross-mul get high H0-H1 (P3)
		packuswb 	xmm3, 	xmm5			 // P3  merge 
		
		// write target pixels 
		// ===============================
		SSE_DWRITE 	[GDI+0x00], xmm0		 // write P0
		SSE_DWRITE 	[GDI+0x10], xmm1		 // write P1
		SSE_DWRITE	[GDI+0x20], xmm2		 // write P2
		SSE_DWRITE	[GDI+0x30], xmm3		 // write P3         
        add         GSI,    64
        add         GDI,    64
        dec         GDX
        jne         normal_loop
    normal_mini_loop:   
		movd 		xmm0,   [GSI]		
		movq 		xmm4,	xmm0	     	
		punpcklbw 	xmm0, 	xmm6	    
		pmulhuw 	xmm0, 	xmm7	    
		punpckhbw 	xmm4, 	xmm6		
		pmulhuw 	xmm4, 	xmm7		
		packuswb 	xmm0, 	xmm4		
		movd 	   [GDI],   xmm0                 
        add         GSI,    4
        add         GDI,    4
        dec         GAX
        jne         normal_mini_loop        
        add         GSI,    GBX
        add         GDI,    GBP
        mov         AX,     CX 
        bswap       GCX 
        mov         DX,     CX 
        bswap       GCX
        dec         GSP
        jne         normal_loop         
        SIZE_MOV    GSP,    mm0
        emms        
        pop         GDI 
        pop         GSI 
        pop         GBP 
        pop         GBX 
        ret                 
        // =====================================================
        // bad case ... deal 1 pixel per
        // 
        // GAX - loop count 
        // GBX - src RVA
        // GCX - height 
        // GDX - loop count temp
        // GSI - src 
        // GDI - des 
        // GBP - des RVA
        // =====================================================        
    bad_ready:
        mov         GDX,    GAX 
       movdq2q     mm6,   xmm6
        movdq2q     mm7,   xmm7     
    align 16
    bad_loop:   
        movd 		mm0,   [GSI]		
		movq 		mm4,	mm0	     	
		punpcklbw 	mm0, 	mm6	    
		pmulhuw 	mm0, 	mm7	    
		punpckhbw 	mm4, 	mm6		
		pmulhuw 	mm4, 	mm7		
		packuswb 	mm0, 	mm4		
		movd 	   [GDI],   mm0			
		add 		GSI, 	4 
		add			GDI,	4
		dec 		GAX
		mov 		GCX, 	GCX
        jne         bad_loop    
        add         GSI,    GBX
        add         GDI,    GBP 
        mov         GAX,    GDX 
        dec         GCX
        jne         bad_loop
        pop         GDI 
        pop         GSI 
        pop         GBP 
        pop         GBX 
        emms
        ret 
        // =====================================================
        // N/A case ... same as bitblt 
        // =====================================================
    __over_copy:    
        SIZE_MOV   xmm0,    GSP
        mov         GSP,    GCX 
        mov         GCX,    GDX     
#ifdef OVER_ALIGNED  
        cld 
    align 16
    over_copy_loop:
        rep         movsd                                   
#else 
    align 16
    over_copy_loop:
        mov         EAX,   [GSI]       
        lea         GSI,   [GSI+4]     
        mov        [GDI],   EAX       
        sub         GCX,    1          
        lea         GDI,   [GDI+4]      
        jne         over_copy_loop                                
#endif
        add         GSI,    GBX        
        add         GDI,    GBP       
        mov         GAX,    GAX        
        mov         GCX,    GDX        
        dec         GSP 
        jne         over_copy_loop
        SIZE_MOV    GSP,   xmm0 
        pop         GDI 
        pop         GSI 
        pop         GBP 
        pop         GBX 
        ret 
        
    ASM_END